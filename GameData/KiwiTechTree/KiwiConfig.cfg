// Kiwi's Tech Tree Overhaul (General Upgrade Configurations)
// Version 1.4
// Created: 31 October 2020 for KSP 1.9.1 to 1.10.1
// Last Updated: 23 July 2021
// 19 November 2020: Added general settings for Kerbalism and Engine Ignitor
// 22 November 2020: Added Science Difficulty Setting
// 23 November 2020: Added upgrade toggle switches
// 28 November 2020: Added cost multipliers for various parts (not yet implemented in-game)
// 23 July 2021: Removed some unused options.

// IMPORTANT NOTE: These settings are not foolproof.  Incorrect settings can break your game!!!!  Change only after you have backed up your save!
// If using a patch either do not specify a pass or use the :FIRST pass to ensure that your patch runs before any Kiwi Tech Tree patches reference them.

KIWI_GENERAL_SETTINGS
{
	UPGRADES
	{
		BATTERY = on 			// Options: on/off Turning off will disable the battery density upgrades in KTT
		ENGINE = on 			// Options: on/off Turning off will disable the engine upgrades in KTT
		COMMAND = on 			// Options: on/off Turning off will disable the command pod structural upgrades in KTT
		FUELTANK = on 			// Options: on/off Turning off will disable the fuel tank upgrades in KTT.  This includes the composite material upgrade for SRBs.
		KERBALENGINEER = off	// Options: on/off Turning on will add Kerbal Engineer modules to all probes.
		PARACHUTE = on	 		// Options: on/off Turning off will disable the parachute upgrades in KTT. 
		RCS = on				// Options: on/off Turning off will disable the RCS upgrades in KTT. This is only relevant if Rational Resources is installed, otherwise it is disabled.
		SAS = on				// Options: on/off Turning off will disable the Probe SAS upgrades in KTT.  Note that this result in the default SAS level for all probes and they may be out of order in the tech tree.  I will not balance accordingly.
		SOLAR = on		 		// Options: on/off Turning off will disable the solar panel upgrade system upgrades in KTT. Only relevant if Near Future Solar is installed, otherwise it is disabled.
		SPACECAPABLE = on 		// Options: on/off Turning off will disable the space capabile upgrade system upgrades in KTT.
		STRUCTURAL = on 		// Options: on/off Turning off will disable the structural parts upgrade system upgrades in KTT.
		SYSTEM = on 			// Options: on/off Turning off will disable the spaceplane system upgrades in KTT.
	}

	SCIENCE // Non-Kerbalism Installs only.  Note hard values are still experimental and subject to change on updates!
	{
		// Options:
		// stock      This will use default science experiment values used in Stock and those defined within mods
		// default    This will set science experiments cap to be equal to the base value and have small tweaks to values.  It will generally reduce the amount of science that can be transmitted for science experiments such as Mystery Goo.
		// hard       This will reduce the base value and cap for science experiments, particularly amongst science experiments that are unmanned.
		
		SCIENCEVALUES = default
	}
	
	// Hard and adaptive values are experimental and subject to change
	TECHTREE
	{
		// Options:
		// default    	This is the default values set by Kiwi Tech Tree
		// hard			This adds additional points to the early tech tree nodes to make it a bit more of a challenge to progress
		// adaptive		This will create an adaptive multiplier based on some pre-determined science-heavy mods to make it a bit more of a challenge.
		// adaptive will take # of Science Mods x Tech Tier x Multiplier and add that to the default tree cost.  Thus if you have 5 science mods with a multiplier of 1, the Tier 4 costs will be 80 + 5 x 4 x 1 = 100
		// This should make early game a bit more challenging, but prevent later game just being a huge grind.
		
		DIFFICULTY = default
		MULTIPLIER = 1	// How much weight should be given to the adaptive mods.  Note that this does not impact default or hard difficulty settings. Stick to integer values!
	}

	KERBALISM_FEATURERELIABILITY
	{
		ENGINE_RELIABILITY = On // Maintains Feature Reliability for Kerbalism, but disables it for Engines if turned Off.
	}
	
	// If enabled, this will convert some stock and restock+ engines to hydrolox engines.
	CRYOENGINES_STOCK
	{
		CONVERT = on
	}
	
	// Settings for when Engine Ignitor is installed alongside Kerbalism Feature Reliability
	ENGINE_IGNITOR_KERBALISM
	{
		BURN_DURATION = On // When Engine Ignitor is installed alongside Kerbalism with Feature Reliability, it will disable's Kerbalism's Ignitor within the module and use only the burn duration.  If turned off, it will disable the reliability module for engines completely.
		FAILURE_PROBABILITY = Off // This will maintain the probability that an engine can fail on start-up in addition to the random probability of failure introduced by Engine Ignitor.  Turning on will likely result in very unreliable engines.
	}
}

KIWI_ENGINE_MULTIPLIERS
{
	KEROLOX // This is for standard and Aerospike LF/O Fuel Engines
	{
		THRUST_MULTIPLIER = 1.2 // This gives the engine 20% additional thrust when upgraded.
		ISP_MULTIPLIER = 1.1 // This gives the engine 10% higher specific impulse when upgraded.
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgrades engines cost 50% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.1 // This is additive, so upgrades engines have 10% more mass than baseline
		KEROLOX_TO_HYDROLOX_ISP = 1.35 // Engines which are converted from Kerolox to Hydrolox in certain conditions (ie. Cryotanks) will have their ISP increased 35% if not individually configured
		KEROLOX_TO_HYDROLOX_THRUST = 1.08 // Engines which are converted from Kerolox to Hydrolox in certain conditions (ie. Cryotanks) will have their Thrust increased 8% if not individually configured
	}
	
	// Kerbal Atomics adds a dual-mode for NERV, but I will not separate out the multipliers
	NUCLEAR // This is for standard NERV Nuclear Engines
	{
		THRUST_MULTIPLIER = 1.2 // This gives the engine 20% additional thrust when upgraded.
		ISP_MULTIPLIER = 1.1 // This gives the engine 10% higher specific impulse when upgraded.
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgrades engines cost 50% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.1 // This is additive, so upgrades engines have 10% more mass than baseline		
	}
	
	HYBRID // This is for R.A.P.I.E.R. Style Engines
	{
		THRUST_AIR_MULTIPLIER = 1.2 // This gives the air-breathing mode 20% additional thrust when upgraded.
		THRUST_CLOSED_MULTIPLIER = 1.2 // This gives the closed cycle mode 20% additional thrust when upgraded.
		ISP_AIR_MULTIPLIER = 0.9 // This gives the air-breathing mode 10% reduced specific impulse when upgraded.
		ISP_CLOSED_MULTIPLIER = 1.1 // This gives the closed cycle mode 10% increased specific impulse when upgraded.
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgrades engines cost 50% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.1 // This is additive, so upgrades engines have 10% more mass than baseline		
	}
	
	JET // This is for standard and dual-mode (ie. afterburners) Liquid Fuel Jet Engines
	{
		THRUST_MULTIPLIER = 1.2 // This gives the engine 20% additional thrust when upgraded.
		ISP_MULTIPLIER = 1.0 // This gives the engine 0% higher specific impulse when upgraded.
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgrades engines cost 50% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.05 // This is additive, so upgrades engines have 5% more mass than baseline		
	}
	
	NUCLEARJET // This is for standard Nuclear Jet Engines
	{
		THRUST_MULTIPLIER = 1.2 // This gives the engine 20% additional thrust when upgraded.
		ISP_MULTIPLIER = 1.0 // This gives the engine 10% higher specific impulse when upgraded.
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgrades engines cost 50% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.05 // This is additive, so upgrades engines have 10% more mass than baseline		
	}
	
	MONOPROPELLANT // This is for standard MonoPropellant Fuel Engines
	{
		THRUST_MULTIPLIER = 1.2 // This gives the engine 20% additional thrust when upgraded.
		ISP_MULTIPLIER = 1.1 // This gives the engine 10% higher specific impulse when upgraded.
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgrades engines cost 50% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.1 // This is additive, so upgrades engines have 10% more mass than baseline		
	}
	
	HYPERGOLIC // This is for standard Hypergolic Fuel Engines (not yet implemented)
	{
		THRUST_MULTIPLIER = 1.2 // This gives the engine 20% additional thrust when upgraded.
		ISP_MULTIPLIER = 1.1 // This gives the engine 10% higher specific impulse when upgraded.
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgrades engines cost 50% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.1 // This is additive, so upgrades engines have 10% more mass than baseline		
	}
	
	ION // This is for standard Hypergolic Fuel Engines (not yet implemented)
	{
		THRUST_MULTIPLIER = 1.10 // This gives the engine 10% additional thrust when upgraded.
		THRUST_MULTIPLIER2 = 1.20 // This gives the engine 20% additional thrust when upgraded.
		ISP_MULTIPLIER = 1.1 // This gives the engine 10% higher specific impulse when upgraded.
		ISP_MULTIPLIER2 = 1.3 // This gives the engine 30% higher specific impulse when upgraded.
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_ENTRYCOST_MULTIPLIER2 = 2.0 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgrades engines cost 50% more than baseline
		UPGRADE_COST_MULTIPLIER2 = 1.5 // This is additive, so upgrades engines cost 150% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.1 // This is additive, so upgrades engines have 10% more mass than baseline		
		UPGRADE_MASS_MULTIPLIER2 = 0.2 // This is additive, so upgrades engines have 20% more mass than baseline		
	}
	
	// If engines are converted from Kerolox to Hydrolox in certain conditions (ie. Cryotanks installed), those conversions are done manually and will not have a standard Kerolox -> Hydrolox conversion.
	HYDROLOX // This is for standard LH2 Fuel Engines, but we currently have Methalox variants available for most hydrolox
	{
		THRUST_MULTIPLIER = 1.2 // This gives the engine 20% additional thrust when upgraded.
		HYDROLOX_ISP_MULTIPLIER = 1.1 // This gives the engine 10% higher specific impulse when upgraded.
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgrades engines cost 50% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.1 // This is additive, so upgrades engines have 10% more mass than baseline
		
		METHALOX_ISP_FRACTION = 0.82 // This is the fraction of the non-upgraded Methalox Specific Impulse relative to the Hydrolox Specific Impulse
		METHALOX_THRUST_MULTIPLIER = 1.2 // This gives the engine 20% additional thrust when upgraded.
		METHALOX_ISP_MULTIPLIER = 1.1 // This gives the engine 10% higher specific impulse when upgraded.		
	}
	METHALOX // This is for standard CH4 Fuel Engines
	{
		THRUST_MULTIPLIER = 1.2 // This gives the engine 20% additional thrust when upgraded.
		ISP_MULTIPLIER = 1.1 // This gives the engine 10% higher specific impulse when upgraded.
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgrades engines cost 50% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.1 // This is additive, so upgrades engines have 10% more mass than baseline
	}
	OTHER // This is for some exotic future fuel types not elsewhere specified
	{
		THRUST_MULTIPLIER = 1.2 // This gives the engine 20% additional thrust when upgraded.
		ISP_MULTIPLIER = 1.1 // This gives the engine 10% higher specific impulse when upgraded.
		
		UPGRADE_ENTRYCOST_MULTIPLIER = 1.5 // This is the cost multiplier for the upgrade relative to the original entry cost of the part.
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgrades engines cost 50% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.1 // This is additive, so upgrades engines have 10% more mass than baseline		
	}	
}

KIWI_PARACHUTE_MULTIPLIERS
{
	STANDARD // This is for parachutes, don't think will have another for simplicity
	{
		UPGRADE_COST_MULTIPLIER = 1.0 // This is additive, so upgraded parachutes cost 100% more than baseline
		UPGRADE_MASS_MULTIPLIER = 0.5 // This is the share of the base mass, so upgrades parachutes have 50% less mass than baseline.
	}
}


KIWI_SPACEPLANE_MULTIPLIERS
{
	SPACECAPABLE // This is for cockpits space capability (ie. skin max temperature)
	{
		UPGRADE_COST_MULTIPLIER = 0.3 // This is additive, so upgraded cockpits cost 30% more than baseline drymass cost
		BASE_MASS_MULTIPLIER = 0.95 // Cockpits that are not space capable have their mass reduced by 5%
		UPGRADE_MASS_MULTIPLIER = 0.05263 // This is additive, so space-capable cockpits weigh 5.263% more than baseline, leaving them at stock values due to non-space-capable weight reduction.
	}
	SPACEPLANE // This is for the various spaceplane systems that have a standardized upgrade (ie. Mk1 through Mk3)
	{
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgraded spaceplane parts cost 50% more than baseline dry mass cost
		UPGRADE_MASS_MULTIPLIER = 0.20 // Upgraded spaceplane parts have 20% reduced dry mass than baseline
	}
}

KIWI_COMMANDMODULES_MULTIPLIERS
{
	COMMANDMODULES // This is for command modules use of composite material
	{
		UPGRADE_COST_MULTIPLIER = 0.5 // This is additive, so upgraded command modules cost 50% more than baseline dry mass cost
		UPGRADE_MASS_MULTIPLIER = 0.20 // Upgraded command modules have 20% reduced dry mass than baseline
	}
}

KIWI_STRUCTURAL_MULTIPLIERS
{
	STRUCTURAL // This is for standard liquid fuel tanks
	{
		UPGRADE_COST_MULTIPLIER = 0.5 // Upgraded structural parts cost 50% more than baseline drymass cost
		UPGRADE_MASS_MULTIPLIER = 0.20 // Upgraded structural parts have 20% reduced dry mass than baseline
	}
}

KIWI_FUELTANK_MULTIPLIERS
{
	LIQUIDFUEL // This is for standard liquid fuel tanks
	{
		UPGRADE_COST_MULTIPLIER = 0.5 // Upgraded fuel tanks cost 50% more than baseline drymass cost
		UPGRADE_MASS_MULTIPLIER = 0.20 // Upgraded fuel tanks have 20% less dry mass than baseline
	}
	MONOPROPELLANT // This is for standard monopropellant fuel tanks
	{
		UPGRADE_COST_MULTIPLIER = 0.5 // Upgraded fuel tanks cost 50% more than baseline drymass cost
		UPGRADE_MASS_MULTIPLIER = 0.20 // Upgraded fuel tanks have 20% less dry mass than baseline
	}
	SOLIDROCKETBOOSTER
	{
		UPGRADE_COST_MULTIPLIER = 1.5 // Upgraded fuel tanks cost 150% more than baseline drymass cost
		UPGRADE_MASS_MULTIPLIER = 0.30 // Upgraded fuel tanks weigh 30% less dry mass than baseline
	}
	ORE
	{
		UPGRADE_COST_MULTIPLIER = 0.5 // Upgraded ore tanks cost 50% more than baseline drymass cost
		UPGRADE_MASS_MULTIPLIER = 0.20 // Upgraded ore tanks weigh 20% less dry mass than baseline
	}
	ARGONGAS
	{
		UPGRADE_COST_MULTIPLIER = 0.5 // Upgraded ore tanks cost 50% more than baseline drymass cost
		UPGRADE_MASS_MULTIPLIER = 0.20 // Upgraded ore tanks weigh 20% less dry mass than baseline
	}
	LITHIUM
	{
		UPGRADE_COST_MULTIPLIER = 0.5 // Upgraded ore tanks cost 50% more than baseline drymass cost
		UPGRADE_MASS_MULTIPLIER = 0.20 // Upgraded ore tanks weigh 20% less dry mass than baseline
	}
	XENON
	{
		UPGRADE_COST_MULTIPLIER = 0.5 // Upgraded ore tanks cost 50% more than baseline drymass cost
		UPGRADE_MASS_MULTIPLIER = 0.20 // Upgraded ore tanks weigh 20% less dry mass than baseline
	}
}