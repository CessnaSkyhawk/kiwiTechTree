// Kiwi's Tech Tree Overhaul (Standardized Engine Upgrades)
// Version 2.0
// Created: 27 October 2020 for KSP 1.11.1
// Last Updated: 2 January 2021
// Special Thanks to JadeofMaar and Kerbalism team, these configs would not be possible without your excellent work!


// Standard Single Fuel Engine Prototype
@PART[*]:HAS[#kiwiEngineUpgradeType[singleMode],~engineUpgrade[off],#kiwiBaseFuel[methalox]]:NEEDS[CommunityResourcePack]:BEFORE[zzKiwiTechTree]
{	
	kerbalismReliability = true
	thrustMult = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,1[1, ]$ // get ASL Isp number
	@thrustMult /= #$MODULE[ModuleEngines*],0/atmosphereCurve/key,0[1, ]$ // get vac Isp number
	
	// Add these here without % or @ so they can be manually overriden by individual parts if required as MM should grab the first instance 
	prototypeThrustMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/PROTOTYPE_THRUST_MULTIPLIER$
	prototypeISPMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/PROTOTYPE_ISP_MULTIPLIER$
	prototypeCostMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/PROTOTYPE_COST_MULTIPLIER$
	prototypeMassMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/PROTOTYPE_MASS_MULTIPLIER$
	
	
	%addCost_P = #$cost$
	@addCost_P *= #$prototypeCostMultiplierConfig$
	
	%addMass_P = #$mass$
	@addMass_P *= #$prototypeMassMultiplierConfig$
	
	// Storing the baseline thrust as well
	prototypeThrust_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@prototypeThrust_0 *= #$prototypeThrustMultiplierConfig$
		
	key0_P_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,0$
	@key0_P_0[1, ] *= #$prototypeISPMultiplierConfig$
	key1_P_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,1$
	@key1_P_0[1, ] *= #$prototypeISPMultiplierConfig$
	key2_P_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,2$
	@key2_P_0[1, ] *= #$prototypeISPMultiplierConfig$
	
	ispVac_P_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,0[1, ]$ // get vac Isp number
	@ispVac_P_0 *= #$prototypeISPMultiplierConfig$
	@ispVac_P_0 *= 10
	@ispVac_P_0 ^= :\.\d+:: // Floor value to get an integer
	@ispVac_P_0 /= 10
	
	ispASL_P_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,1[1, ]$ // get ASL Isp number
	@ispASL_P_0 *= #$prototypeISPMultiplierConfig$
	@ispASL_P_0 *= 10
	@ispASL_P_0 ^= :\.\d+:: // Floor value to get an integer
	@ispASL_P_0 /= 10
	
	thrustVac_P_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@thrustVac_P_0 *= #$prototypeThrustMultiplierConfig$
	@thrustVac_P_0 *= 10
	@thrustVac_P_0 ^= :\.\d+:: // Floor value to get an integer
	@thrustVac_P_0 /= 10
	
	thrustASL_P_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@thrustASL_P_0 *= #$prototypeThrustMultiplierConfig$
	@thrustASL_P_0 *= #$thrustMult$
	@thrustASL_P_0 *= 10
	@thrustASL_P_0 ^= :\.\d+:: // Floor value to get an integer
	@thrustASL_P_0 /= 10
	
	
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = kiwiEngineSwitch
		switcherDescriptionPlural = #LOC_KTT_B9DESCRIPTIONPLURALS_ENGINESWITCH
		switcherDescription = #LOC_KTT_B9DESCRIPTION_ENGINESWITCH

		affectDragCubes = False
		affectFARVoxels = False
		
		SUBTYPE
	    {
			name = prototype
			title = #LOC_KTT_B9TITLE_PROTOTYPE_METHALOX
			descriptionDetail = #<b>Thrust:</b> $../../thrustASL_P_0$ kN ASL / $../../thrustVac_P_0$ kN Vac.\n<b>Isp:</b> $../../ispASL_P_0$ s ASL / $../../ispVac_P_0$ s Vac.
			addedCost = #$../../addCost_P$
			addedMass = #$../../addMass_P$
			defaultSubtypePriority = 0
			primaryColor = #38FF38
			secondaryColor = ResourceColorLqdMethane

			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleEngines*
			    }

			    DATA
			    {
					maxThrust = #$../../../../prototypeThrust_0$
					atmosphereCurve
					{
						key = #$../../../../../key0_P_0$
						key = #$../../../../../key1_P_0$
						key = #$../../../../../key2_P_0$
					}
				}			    
			}
	    }
	}	
}


// Standard Single Fuel Engine Upgrade
@PART[*]:HAS[#kiwiEngineUpgradeType[singleMode],~engineUpgrade[off],#kiwiBaseFuel[methalox],#kiwiFuelMethalox[Yes]]:NEEDS[CommunityResourcePack]:FOR[zzKiwiTechTree]
{	
	//// **** BASELINE **** \\\\
	// Add these here without % or @ so they can be manually overriden by individual parts if required as MM should grab the first instance 
	baselineMethaloxThrustMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/BASELINE_THRUST_MULTIPLIER$
	baselineMethaloxISPMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/BASELINE_ISP_MULTIPLIER$
		
	%addCost_B = 0
	
	%addMass_B = 0
	
	// Storing the baseline thrust as well
	baselineMethaloxThrust_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@baselineMethaloxThrust_0 *= #$baselineMethaloxThrustMultiplierConfig$
		
	%key0_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,0$
	@key0_B_0[1, ] *= #$baselineMethaloxISPMultiplierConfig$
	%key1_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,1$
	@key1_B_0[1, ] *= #$baselineMethaloxISPMultiplierConfig$
	%key2_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,2$
	@key2_B_0[1, ] *= #$baselineMethaloxISPMultiplierConfig$
	
	%ispVac_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,0[1, ]$ // get vac Isp number
	@ispVac_B_0 *= #$baselineMethaloxISPMultiplierConfig$
	@ispVac_B_0 *= 10
	@ispVac_B_0 ^= :\.\d+:: // Floor value to get an integer
	@ispVac_B_0 /= 10
	
	%ispASL_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,1[1, ]$ // get ASL Isp number
	@ispASL_B_0 *= #$baselineMethaloxISPMultiplierConfig$
	@ispASL_B_0 *= 10
	@ispASL_B_0 ^= :\.\d+:: // Floor value to get an integer
	@ispASL_B_0 /= 10
		
	%thrustVac_B_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@thrustVac_B_0 *= #$baselineMethaloxThrustMultiplierConfig$
	@thrustVac_B_0 *= 10
	@thrustVac_B_0 ^= :\.\d+:: // Floor value to get an integer
	@thrustVac_B_0 /= 10
	
	%thrustASL_B_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@thrustASL_B_0 *= #$baselineMethaloxThrustMultiplierConfig$
	@thrustASL_B_0 *= #$thrustMult$
	@thrustASL_B_0 *= 10
	@thrustASL_B_0 ^= :\.\d+:: // Floor value to get an integer
	@thrustASL_B_0 /= 10
	
	
	//// **** UPGRADE **** \\\\
	upgradeMethaloxThrustMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/UPGRADE_THRUST_MULTIPLIER$
	upgradeMethaloxISPMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/UPGRADE_ISP_MULTIPLIER$
	upgradeMethaloxCostMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/UPGRADE_COST_MULTIPLIER$
	upgradeMethaloxMassMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/UPGRADE_MASS_MULTIPLIER$
	
	%addCost_U = #$cost$
	@addCost_U *= #$upgradeMethaloxCostMultiplierConfig$
	
	%addMass_U = #$mass$
	@addMass_U *= #$upgradeMethaloxMassMultiplierConfig$
	
	// Storing the upgrade thrust as well
	upgradeMethaloxThrust_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@upgradeMethaloxThrust_0 *= #$upgradeMethaloxThrustMultiplierConfig$
		
	%key0_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,0$
	@key0_U_0[1, ] *= #$upgradeMethaloxISPMultiplierConfig$
	%key1_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,1$
	@key1_U_0[1, ] *= #$upgradeMethaloxISPMultiplierConfig$
	%key2_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,2$
	@key2_U_0[1, ] *= #$upgradeMethaloxISPMultiplierConfig$
	
	%ispVac_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,0[1, ]$ // get vac Isp number
	@ispVac_U_0 *= #$upgradeMethaloxISPMultiplierConfig$
	@ispVac_U_0 *= 10
	@ispVac_U_0 ^= :\.\d+:: // Floor value to get an integer
	@ispVac_U_0 /= 10
	
	%ispASL_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,1[1, ]$ // get ASL Isp number
	@ispASL_U_0 *= #$upgradeMethaloxISPMultiplierConfig$
	@ispASL_U_0 *= 10
	@ispASL_U_0 ^= :\.\d+:: // Floor value to get an integer
	@ispASL_U_0 /= 10
	
	%thrustVac_U_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@thrustVac_U_0 *= #$upgradeMethaloxThrustMultiplierConfig$
	@thrustVac_U_0 *= 10
	@thrustVac_U_0 ^= :\.\d+:: // Floor value to get an integer
	@thrustVac_U_0 /= 10
	
	%thrustASL_U_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@thrustASL_U_0 *= #$upgradeMethaloxThrustMultiplierConfig$
	@thrustASL_U_0 *= #$thrustMult$
	@thrustASL_U_0 *= 10
	@thrustASL_U_0 ^= :\.\d+:: // Floor value to get an integer
	@thrustASL_U_0 /= 10
	
	
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[kiwiEngineSwitch]]
	{
		SUBTYPE
	    {
			name = baselineMethalox
			title = #LOC_KTT_B9TITLE_BASELINE_METHALOX
			descriptionDetail = #<b>Thrust:</b> $../../thrustASL_B_0$ kN ASL / $../../thrustVac_B_0$ kN Vac.\n<b>Isp:</b> $../../ispASL_B_0$ s ASL / $../../ispVac_B_0$ s Vac.
			addedCost = #$../../addCost_B$
			addedMass = #$../../addMass_B$
			defaultSubtypePriority = 1
			primaryColor = #00C60D
			secondaryColor = ResourceColorLqdMethane
			upgradeRequired = #$../../kiwiEngineUpgradeMethalox0$
			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleEngines*
			    }

			    DATA
			    {
					maxThrust = #$../../../../baselineMethaloxThrust_0$
					atmosphereCurve
					{
						key = #$../../../../../key0_B_0$
						key = #$../../../../../key1_B_0$
						key = #$../../../../../key2_B_0$
					}
					PROPELLANT
					{
						name = LqdMethane
						ratio = 3
						DrawGauge = True
					}
					PROPELLANT
					{
						name = Oxidizer
						ratio = 1
					}
				}			    
			}
	    }
		
		SUBTYPE
	    {
			name = upgradeMethalox
			title = #LOC_KTT_B9TITLE_UPGRADE_METHALOX
			descriptionDetail = #<b>Thrust:</b> $../../thrustASL_U_0$ kN ASL / $../../thrustVac_U_0$ kN Vac.\n<b>Isp:</b> $../../ispASL_U_0$ s ASL / $../../ispVac_U_0$ s Vac.
			addedCost = #$../../addCost_U$
			addedMass = #$../../addMass_U$
			defaultSubtypePriority = 0
			primaryColor = #005528
			secondaryColor = ResourceColorLqdMethane
			upgradeRequired = #$../../kiwiEngineUpgradeMethalox1$
			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleEngines*
			    }

			    DATA
			    {
					maxThrust = #$../../../../upgradeMethaloxThrust_0$
					atmosphereCurve
					{
						key = #$../../../../../key0_U_0$
						key = #$../../../../../key1_U_0$
						key = #$../../../../../key2_U_0$
					}
					PROPELLANT
					{
						name = LqdMethane
						ratio = 3
						DrawGauge = True
					}
					PROPELLANT
					{
						name = Oxidizer
						ratio = 1
					}
				}			    
			}
	    }
	}	
}


// Standard Single Fuel Engine Upgrade
@PART[*]:HAS[#kiwiEngineUpgradeType[singleMode],~engineUpgrade[off],#kiwiBaseFuel[methalox],#kiwiFuelKerolox[Yes]]:NEEDS[CommunityResourcePack]:FOR[zzKiwiTechTree]
{	
	methalox_to_kerolox_thrust = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/TO_KEROLOX_THRUST$
	methalox_to_kerolox_isp = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/TO_KEROLOX_ISP$
	methalox_to_kerolox_cost = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/TO_KEROLOX_COST$
	methalox_to_kerolox_mass = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/TO_KEROLOX_MASS$

	//// **** BASELINE **** \\\\
	// Add these here without % or @ so they can be manually overriden by individual parts if required as MM should grab the first instance 
	baselineKeroloxThrustMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/KEROLOX/BASELINE_THRUST_MULTIPLIER$
	baselineKeroloxISPMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/KEROLOX/BASELINE_ISP_MULTIPLIER$
	
	%addCost_B = #$cost$
	@addCost_B *= #$hydrolox_to_kerolox_cost$
	
	%addMass_B = #$mass$
	@addMass_B *= #$hydrolox_to_kerolox_mass$
	
	// Storing the baseline thrust as well
	baselineKeroloxThrust_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@baselineKeroloxThrust_0 *= #$baselineKeroloxThrustMultiplierConfig$
	@baselineKeroloxThrust_0 *= #$hydrolox_to_kerolox_thrust$
		
	%key0_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,0$
	@key0_B_0[1, ] *= #$baselineKeroloxISPMultiplierConfig$
	@key0_B_0[1, ] *= #$hydrolox_to_kerolox_isp$
	%key1_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,1$
	@key1_B_0[1, ] *= #$baselineKeroloxISPMultiplierConfig$
	@key1_B_0[1, ] *= #$hydrolox_to_kerolox_isp$
	%key2_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,2$
	@key2_B_0[1, ] *= #$baselineKeroloxISPMultiplierConfig$
	@key2_B_0[1, ] *= #$hydrolox_to_kerolox_isp$
	
	%ispVac_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,0[1, ]$ // get vac Isp number
	@ispVac_B_0 *= #$baselineKeroloxISPMultiplierConfig$
	@ispVac_B_0 *= #$hydrolox_to_kerolox_isp$
	@ispVac_B_0 *= 10
	@ispVac_B_0 ^= :\.\d+:: // Floor value to get an integer
	@ispVac_B_0 /= 10
	
	%ispASL_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,1[1, ]$ // get ASL Isp number
	@ispASL_B_0 *= #$baselineKeroloxISPMultiplierConfig$
	@ispASL_B_0 *= #$hydrolox_to_kerolox_isp$
	@ispASL_B_0 *= 10
	@ispASL_B_0 ^= :\.\d+:: // Floor value to get an integer
	@ispASL_B_0 /= 10
		
	%thrustVac_B_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@thrustVac_B_0 *= #$baselineKeroloxThrustMultiplierConfig$
	@thrustVac_B_0 *= #$hydrolox_to_kerolox_thrust$
	@thrustVac_B_0 *= 10
	@thrustVac_B_0 ^= :\.\d+:: // Floor value to get an integer
	@thrustVac_B_0 /= 10
	
	%thrustASL_B_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@thrustASL_B_0 *= #$baselineKeroloxThrustMultiplierConfig$
	@thrustASL_B_0 *= #$hydrolox_to_kerolox_thrust$
	@thrustASL_B_0 *= #$thrustMult$
	@thrustASL_B_0 *= 10
	@thrustASL_B_0 ^= :\.\d+:: // Floor value to get an integer
	@thrustASL_B_0 /= 10
	
	
	//// **** UPGRADE **** \\\\
	upgradeKeroloxThrustMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/KEROLOX/UPGRADE_THRUST_MULTIPLIER$
	upgradeKeroloxISPMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/KEROLOX/UPGRADE_ISP_MULTIPLIER$
	upgradeKeroloxCostMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/KEROLOX/UPGRADE_COST_MULTIPLIER$
	upgradeKeroloxMassMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/KEROLOX/UPGRADE_MASS_MULTIPLIER$
	
	%addCost_U = #$upgradeKeroloxCostMultiplierConfig$
	@addCost_U += #$hydrolox_to_kerolox_cost$
	%addCost_U *= #$cost$
	
	%addMass_U = #$upgradeKeroloxMassMultiplierConfig$
	@addMass_U += #$hydrolox_to_kerolox_mass$
	@addMass_U *= #$mass$
	
	// Storing the upgrade thrust as well
	upgradeKeroloxThrust_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@upgradeKeroloxThrust_0 *= #$upgradeKeroloxThrustMultiplierConfig$
	@upgradeKeroloxThrust_0 *= #$hydrolox_to_kerolox_thrust$
		
	%key0_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,0$
	@key0_U_0[1, ] *= #$upgradeKeroloxISPMultiplierConfig$
	@key0_U_0[1, ] *= #$hydrolox_to_kerolox_isp$
	%key1_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,1$
	@key1_U_0[1, ] *= #$upgradeKeroloxISPMultiplierConfig$
	@key1_U_0[1, ] *= #$hydrolox_to_kerolox_isp$
	%key2_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,2$
	@key2_U_0[1, ] *= #$upgradeKeroloxISPMultiplierConfig$
	@key2_U_0[1, ] *= #$hydrolox_to_kerolox_isp$
	
	%ispVac_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,0[1, ]$ // get vac Isp number
	@ispVac_U_0 *= #$upgradeKeroloxISPMultiplierConfig$
	@ispVac_U_0 *= #$hydrolox_to_kerolox_isp$
	@ispVac_U_0 *= 10
	@ispVac_U_0 ^= :\.\d+:: // Floor value to get an integer
	@ispVac_U_0 /= 10
	
	%ispASL_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,1[1, ]$ // get ASL Isp number
	@ispASL_U_0 *= #$upgradeKeroloxISPMultiplierConfig$
	@ispASL_U_0 *= #$hydrolox_to_kerolox_isp$
	@ispASL_U_0 *= 10
	@ispASL_U_0 ^= :\.\d+:: // Floor value to get an integer
	@ispASL_U_0 /= 10
	
	%thrustVac_U_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@thrustVac_U_0 *= #$upgradeKeroloxThrustMultiplierConfig$
	@thrustVac_U_0 *= #$hydrolox_to_kerolox_thrust$
	@thrustVac_U_0 *= 10
	@thrustVac_U_0 ^= :\.\d+:: // Floor value to get an integer
	@thrustVac_U_0 /= 10
	
	%thrustASL_U_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@thrustASL_U_0 *= #$upgradeKeroloxThrustMultiplierConfig$
	@thrustASL_U_0 *= #$hydrolox_to_kerolox_thrust$
	@thrustASL_U_0 *= #$thrustMult$
	@thrustASL_U_0 *= 10
	@thrustASL_U_0 ^= :\.\d+:: // Floor value to get an integer
	@thrustASL_U_0 /= 10
	
	
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[kiwiEngineSwitch]]
	{
		SUBTYPE
	    {
			name = baselineKerolox
			title = #LOC_KTT_B9TITLE_BASELINE_KEROLOX
			descriptionDetail = #<b>Thrust:</b> $../../thrustASL_B_0$ kN ASL / $../../thrustVac_B_0$ kN Vac.\n<b>Isp:</b> $../../ispASL_B_0$ s ASL / $../../ispVac_B_0$ s Vac.
			addedCost = #$../../addCost_B$
			addedMass = #$../../addMass_B$
			defaultSubtypePriority = 1
			primaryColor = #00C60D
			secondaryColor = ResourceColorLiquidFuel
			upgradeRequired = #$../../kiwiEngineUpgradeKerolox0$
			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleEngines*
			    }

			    DATA
			    {
					maxThrust = #$../../../../baselineKeroloxThrust_0$
					atmosphereCurve
					{
						key = #$../../../../../key0_B_0$
						key = #$../../../../../key1_B_0$
						key = #$../../../../../key2_B_0$
					}
					PROPELLANT
					{
						name = LiquidFuel
						ratio = 0.9
						DrawGauge = True
					}
					PROPELLANT
					{
						name = Oxidizer
						ratio = 1.1
					}
				}			    
			}
	    }
		
		SUBTYPE
	    {
			name = upgradeKerolox
			title = #LOC_KTT_B9TITLE_UPGRADE_KEROLOX
			descriptionDetail = #<b>Thrust:</b> $../../thrustASL_U_0$ kN ASL / $../../thrustVac_U_0$ kN Vac.\n<b>Isp:</b> $../../ispASL_U_0$ s ASL / $../../ispVac_U_0$ s Vac.
			addedCost = #$../../addCost_U$
			addedMass = #$../../addMass_U$
			defaultSubtypePriority = 0
			primaryColor = #005528
			secondaryColor = ResourceColorLiquidFuel
			upgradeRequired = #$../../kiwiEngineUpgradeKerolox1$
			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleEngines*
			    }

			    DATA
			    {
					maxThrust = #$../../../../upgradeKeroloxThrust_0$
					atmosphereCurve
					{
						key = #$../../../../../key0_U_0$
						key = #$../../../../../key1_U_0$
						key = #$../../../../../key2_U_0$
					}
					PROPELLANT
					{
						name = LiquidFuel
						ratio = 0.9
						DrawGauge = True
					}
					PROPELLANT
					{
						name = Oxidizer
						ratio = 1.1
					}
				}			    
			}
	    }
	}	
}




// Standard Single Fuel Engine Upgrade
@PART[*]:HAS[#kiwiEngineUpgradeType[singleMode],~engineUpgrade[off],#kiwiBaseFuel[methalox],#kiwiFuelHydrolox[Yes]]:NEEDS[CommunityResourcePack]:FOR[zzKiwiTechTree]
{	
	methalox_to_hydrolox_thrust = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/TO_HYDROLOX_THRUST$
	methalox_to_hydrolox_isp = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/TO_HYDROLOX_ISP$
	methalox_to_hydrolox_cost = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/TO_HYDROLOX_COST$
	methalox_to_hydrolox_mass = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/TO_HYDROLOX_MASS$

	//// **** BASELINE **** \\\\
	// Add these here without % or @ so they can be manually overriden by individual parts if required as MM should grab the first instance 
	baselineHydroloxThrustMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/HYDROLOX/BASELINE_THRUST_MULTIPLIER$
	baselineHydroloxISPMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/HYDROLOX/BASELINE_ISP_MULTIPLIER$
	
	%addCost_B = #$cost$
	@addCost_B *= #$methalox_to_hydrolox_cost$
	
	%addMass_B = #$mass$
	@addMass_B *= #$methalox_to_hydrolox_mass$
	
	// Storing the baseline thrust as well
	baselineHydroloxThrust_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@baselineHydroloxThrust_0 *= #$baselineHydroloxThrustMultiplierConfig$
	@baselineHydroloxThrust_0 *= #$methalox_to_hydrolox_thrust$
		
	%key0_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,0$
	@key0_B_0[1, ] *= #$baselineHydroloxISPMultiplierConfig$
	@key0_B_0[1, ] *= #$methalox_to_hydrolox_isp$
	%key1_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,1$
	@key1_B_0[1, ] *= #$baselineHydroloxISPMultiplierConfig$
	@key1_B_0[1, ] *= #$methalox_to_hydrolox_isp$
	%key2_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,2$
	@key2_B_0[1, ] *= #$baselineHydroloxISPMultiplierConfig$
	@key2_B_0[1, ] *= #$methalox_to_hydrolox_isp$
	
	%ispVac_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,0[1, ]$ // get vac Isp number
	@ispVac_B_0 *= #$baselineHydroloxISPMultiplierConfig$
	@ispVac_B_0 *= #$methalox_to_hydrolox_isp$
	@ispVac_B_0 *= 10
	@ispVac_B_0 ^= :\.\d+:: // Floor value to get an integer
	@ispVac_B_0 /= 10
	
	%ispASL_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,1[1, ]$ // get ASL Isp number
	@ispASL_B_0 *= #$baselineHydroloxISPMultiplierConfig$
	@ispASL_B_0 *= #$methalox_to_hydrolox_isp$
	@ispASL_B_0 *= 10
	@ispASL_B_0 ^= :\.\d+:: // Floor value to get an integer
	@ispASL_B_0 /= 10
		
	%thrustVac_B_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@thrustVac_B_0 *= #$baselineHydroloxThrustMultiplierConfig$
	@thrustVac_B_0 *= #$methalox_to_hydrolox_thrust$
	@thrustVac_B_0 *= 10
	@thrustVac_B_0 ^= :\.\d+:: // Floor value to get an integer
	@thrustVac_B_0 /= 10
	
	%thrustASL_B_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@thrustASL_B_0 *= #$baselineHydroloxThrustMultiplierConfig$
	@thrustASL_B_0 *= #$methalox_to_hydrolox_thrust$
	@thrustASL_B_0 *= #$thrustMult$
	@thrustASL_B_0 *= 10
	@thrustASL_B_0 ^= :\.\d+:: // Floor value to get an integer
	@thrustASL_B_0 /= 10
	
	
	//// **** UPGRADE **** \\\\
	upgradeHydroloxThrustMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/HYDROLOX/UPGRADE_THRUST_MULTIPLIER$
	upgradeHydroloxISPMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/HYDROLOX/UPGRADE_ISP_MULTIPLIER$
	upgradeHydroloxCostMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/HYDROLOX/UPGRADE_COST_MULTIPLIER$
	upgradeHydroloxMassMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/HYDROLOX/UPGRADE_MASS_MULTIPLIER$
	
	%addCost_U = #$upgradeHydroloxCostMultiplierConfig$
	@addCost_U += #$methalox_to_hydrolox_cost$
	%addCost_U *= #$cost$
	
	%addMass_U = #$upgradeHydroloxMassMultiplierConfig$
	@addMass_U += #$methalox_to_hydrolox_mass$
	@addMass_U *= #$mass$
	
	// Storing the upgrade thrust as well
	upgradeHydroloxThrust_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@upgradeHydroloxThrust_0 *= #$upgradeHydroloxThrustMultiplierConfig$
	@upgradeHydroloxThrust_0 *= #$methalox_to_hydrolox_thrust$
		
	%key0_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,0$
	@key0_U_0[1, ] *= #$upgradeHydroloxISPMultiplierConfig$
	@key0_U_0[1, ] *= #$methalox_to_hydrolox_isp$
	%key1_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,1$
	@key1_U_0[1, ] *= #$upgradeHydroloxISPMultiplierConfig$
	@key1_U_0[1, ] *= #$methalox_to_hydrolox_isp$
	%key2_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,2$
	@key2_U_0[1, ] *= #$upgradeHydroloxISPMultiplierConfig$
	@key2_U_0[1, ] *= #$methalox_to_hydrolox_isp$
	
	%ispVac_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,0[1, ]$ // get vac Isp number
	@ispVac_U_0 *= #$upgradeHydroloxISPMultiplierConfig$
	@ispVac_U_0 *= #$methalox_to_hydrolox_isp$
	@ispVac_U_0 *= 10
	@ispVac_U_0 ^= :\.\d+:: // Floor value to get an integer
	@ispVac_U_0 /= 10
	
	%ispASL_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,1[1, ]$ // get ASL Isp number
	@ispASL_U_0 *= #$upgradeHydroloxISPMultiplierConfig$
	@ispASL_U_0 *= #$methalox_to_hydrolox_isp$
	@ispASL_U_0 *= 10
	@ispASL_U_0 ^= :\.\d+:: // Floor value to get an integer
	@ispASL_U_0 /= 10
	
	%thrustVac_U_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@thrustVac_U_0 *= #$upgradeHydroloxThrustMultiplierConfig$
	@thrustVac_U_0 *= #$methalox_to_hydrolox_thrust$
	@thrustVac_U_0 *= 10
	@thrustVac_U_0 ^= :\.\d+:: // Floor value to get an integer
	@thrustVac_U_0 /= 10
	
	%thrustASL_U_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@thrustASL_U_0 *= #$upgradeHydroloxThrustMultiplierConfig$
	@thrustASL_U_0 *= #$methalox_to_hydrolox_thrust$
	@thrustASL_U_0 *= #$thrustMult$
	@thrustASL_U_0 *= 10
	@thrustASL_U_0 ^= :\.\d+:: // Floor value to get an integer
	@thrustASL_U_0 /= 10
	
	
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[kiwiEngineSwitch]]
	{
		SUBTYPE
	    {
			name = baselineHydrolox
			title = #LOC_KTT_B9TITLE_BASELINE_HYDROLOX
			descriptionDetail = #<b>Thrust:</b> $../../thrustASL_B_0$ kN ASL / $../../thrustVac_B_0$ kN Vac.\n<b>Isp:</b> $../../ispASL_B_0$ s ASL / $../../ispVac_B_0$ s Vac.
			addedCost = #$../../addCost_B$
			addedMass = #$../../addMass_B$
			defaultSubtypePriority = 1
			primaryColor = #00C60D
			secondaryColor = ResourceColorLqdHydrogen
			upgradeRequired = #$../../kiwiEngineUpgradeHydrolox0$
			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleEngines*
			    }

			    DATA
			    {
					maxThrust = #$../../../../baselineHydroloxThrust_0$
					atmosphereCurve
					{
						key = #$../../../../../key0_B_0$
						key = #$../../../../../key1_B_0$
						key = #$../../../../../key2_B_0$
					}
					PROPELLANT
					{
						name = LqdHydrogen
						ratio = 1.5
						DrawGauge = True
					}
					PROPELLANT
					{
						name = Oxidizer
						ratio = 0.1
					}
				}			    
			}
	    }
		
		SUBTYPE
	    {
			name = upgradeHydrolox
			title = #LOC_KTT_B9TITLE_UPGRADE_HYDROLOX
			descriptionDetail = #<b>Thrust:</b> $../../thrustASL_U_0$ kN ASL / $../../thrustVac_U_0$ kN Vac.\n<b>Isp:</b> $../../ispASL_U_0$ s ASL / $../../ispVac_U_0$ s Vac.
			addedCost = #$../../addCost_U$
			addedMass = #$../../addMass_U$
			defaultSubtypePriority = 0
			primaryColor = #005528
			secondaryColor = ResourceColorLqdHydrogen
			upgradeRequired = #$../../kiwiEngineUpgradeHydrolox1$
			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleEngines*
			    }

			    DATA
			    {
					maxThrust = #$../../../../upgradeHydroloxThrust_0$
					atmosphereCurve
					{
						key = #$../../../../../key0_U_0$
						key = #$../../../../../key1_U_0$
						key = #$../../../../../key2_U_0$
					}
					PROPELLANT
					{
						name = LqdHydrogen
						ratio = 1.5
						DrawGauge = True
					}
					PROPELLANT
					{
						name = Oxidizer
						ratio = 0.1
					}
				}			    
			}
	    }
	}	
}




// Standard Single Fuel Engine Upgrade
@PART[*]:HAS[#kiwiEngineUpgradeType[singleMode],~engineUpgrade[off],#kiwiBaseFuel[methalox],#kiwiFuelHypergolic[Yes]]:FOR[zzKiwiTechTree]
{	
	methalox_to_hypergolic_thrust = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/TO_HYPERGOLIC_THRUST$
	methalox_to_hypergolic_isp = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/TO_HYPERGOLIC_ISP$
	methalox_to_hypergolic_cost = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/TO_HYPERGOLIC_COST$
	methalox_to_hypergolic_mass = #$@KIWI_ENGINE_MULTIPLIERS/METHALOX/TO_HYPERGOLIC_MASS$

	//// **** BASELINE **** \\\\
	// Add these here without % or @ so they can be manually overriden by individual parts if required as MM should grab the first instance 
	baselineHypergolicThrustMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/HYPERGOLIC/BASELINE_THRUST_MULTIPLIER$
	baselineHypergolicISPMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/HYPERGOLIC/BASELINE_ISP_MULTIPLIER$
	
	%addCost_B = #$cost$
	@addCost_B *= #$methalox_to_hypergolic_cost$
	
	%addMass_B = #$mass$
	@addMass_B *= #$methalox_to_hypergolic_mass$
	
	// Storing the baseline thrust as well
	baselineHypergolicThrust_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@baselineHypergolicThrust_0 *= #$baselineHypergolicThrustMultiplierConfig$
	@baselineHypergolicThrust_0 *= #$methalox_to_hypergolic_thrust$
		
	%key0_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,0$
	@key0_B_0[1, ] *= #$baselineHypergolicISPMultiplierConfig$
	@key0_B_0[1, ] *= #$methalox_to_hypergolic_isp$
	%key1_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,1$
	@key1_B_0[1, ] *= #$baselineHypergolicISPMultiplierConfig$
	@key1_B_0[1, ] *= #$methalox_to_hypergolic_isp$
	%key2_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,2$
	@key2_B_0[1, ] *= #$baselineHypergolicISPMultiplierConfig$
	@key2_B_0[1, ] *= #$methalox_to_hypergolic_isp$
	
	%ispVac_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,0[1, ]$ // get vac Isp number
	@ispVac_B_0 *= #$baselineHypergolicISPMultiplierConfig$
	@ispVac_B_0 *= #$methalox_to_hypergolic_isp$
	@ispVac_B_0 *= 10
	@ispVac_B_0 ^= :\.\d+:: // Floor value to get an integer
	@ispVac_B_0 /= 10
	
	%ispASL_B_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,1[1, ]$ // get ASL Isp number
	@ispASL_B_0 *= #$baselineHypergolicISPMultiplierConfig$
	@ispASL_B_0 *= #$methalox_to_hypergolic_isp$
	@ispASL_B_0 *= 10
	@ispASL_B_0 ^= :\.\d+:: // Floor value to get an integer
	@ispASL_B_0 /= 10
		
	%thrustVac_B_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@thrustVac_B_0 *= #$baselineHypergolicThrustMultiplierConfig$
	@thrustVac_B_0 *= #$methalox_to_hypergolic_thrust$
	@thrustVac_B_0 *= 10
	@thrustVac_B_0 ^= :\.\d+:: // Floor value to get an integer
	@thrustVac_B_0 /= 10
	
	%thrustASL_B_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@thrustASL_B_0 *= #$baselineHypergolicThrustMultiplierConfig$
	@thrustASL_B_0 *= #$methalox_to_hypergolic_thrust$
	@thrustASL_B_0 *= #$thrustMult$
	@thrustASL_B_0 *= 10
	@thrustASL_B_0 ^= :\.\d+:: // Floor value to get an integer
	@thrustASL_B_0 /= 10
	
	
	//// **** UPGRADE **** \\\\
	upgradeHypergolicThrustMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/HYPERGOLIC/UPGRADE_THRUST_MULTIPLIER$
	upgradeHypergolicISPMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/HYPERGOLIC/UPGRADE_ISP_MULTIPLIER$
	upgradeHypergolicCostMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/HYPERGOLIC/UPGRADE_COST_MULTIPLIER$
	upgradeHypergolicMassMultiplierConfig = #$@KIWI_ENGINE_MULTIPLIERS/HYPERGOLIC/UPGRADE_MASS_MULTIPLIER$
	
	%addCost_U = #$upgradeHypergolicCostMultiplierConfig$
	@addCost_U += #$methalox_to_hypergolic_cost$
	%addCost_U *= #$cost$
	
	%addMass_U = #$upgradeHypergolicMassMultiplierConfig$
	@addMass_U += #$methalox_to_hypergolic_mass$
	@addMass_U *= #$mass$
	
	// Storing the upgrade thrust as well
	upgradeHypergolicThrust_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@upgradeHypergolicThrust_0 *= #$upgradeHypergolicThrustMultiplierConfig$
	@upgradeHypergolicThrust_0 *= #$methalox_to_hypergolic_thrust$
		
	%key0_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,0$
	@key0_U_0[1, ] *= #$upgradeHypergolicISPMultiplierConfig$
	@key0_U_0[1, ] *= #$methalox_to_hypergolic_isp$
	%key1_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,1$
	@key1_U_0[1, ] *= #$upgradeHypergolicISPMultiplierConfig$
	@key1_U_0[1, ] *= #$methalox_to_hypergolic_isp$
	%key2_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,2$
	@key2_U_0[1, ] *= #$upgradeHypergolicISPMultiplierConfig$
	@key2_U_0[1, ] *= #$methalox_to_hypergolic_isp$
	
	%ispVac_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,0[1, ]$ // get vac Isp number
	@ispVac_U_0 *= #$upgradeHypergolicISPMultiplierConfig$
	@ispVac_U_0 *= #$methalox_to_hypergolic_isp$
	@ispVac_U_0 *= 10
	@ispVac_U_0 ^= :\.\d+:: // Floor value to get an integer
	@ispVac_U_0 /= 10
	
	%ispASL_U_0 = #$MODULE[ModuleEngines*],0/atmosphereCurve/key,1[1, ]$ // get ASL Isp number
	@ispASL_U_0 *= #$upgradeHypergolicISPMultiplierConfig$
	@ispASL_U_0 *= #$methalox_to_hypergolic_isp$
	@ispASL_U_0 *= 10
	@ispASL_U_0 ^= :\.\d+:: // Floor value to get an integer
	@ispASL_U_0 /= 10
	
	%thrustVac_U_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@thrustVac_U_0 *= #$upgradeHypergolicThrustMultiplierConfig$
	@thrustVac_U_0 *= #$methalox_to_hypergolic_thrust$
	@thrustVac_U_0 *= 10
	@thrustVac_U_0 ^= :\.\d+:: // Floor value to get an integer
	@thrustVac_U_0 /= 10
	
	%thrustASL_U_0 = #$MODULE[ModuleEngines*],0/maxThrust$
	@thrustASL_U_0 *= #$upgradeHypergolicThrustMultiplierConfig$
	@thrustASL_U_0 *= #$methalox_to_hypergolic_thrust$
	@thrustASL_U_0 *= #$thrustMult$
	@thrustASL_U_0 *= 10
	@thrustASL_U_0 ^= :\.\d+:: // Floor value to get an integer
	@thrustASL_U_0 /= 10
	
	
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[kiwiEngineSwitch]]
	{
		SUBTYPE
	    {
			name = baselineHypergolic
			title = #LOC_KTT_B9TITLE_BASELINE_HYPERGOLIC
			descriptionDetail = #<b>Thrust:</b> $../../thrustASL_B_0$ kN ASL / $../../thrustVac_B_0$ kN Vac.\n<b>Isp:</b> $../../ispASL_B_0$ s ASL / $../../ispVac_B_0$ s Vac.
			addedCost = #$../../addCost_B$
			addedMass = #$../../addMass_B$
			defaultSubtypePriority = 1
			primaryColor = #00C60D
			secondaryColor = ResourceColorMonoPropellant
			upgradeRequired = #$../../kiwiEngineUpgradeHypergolic0$
			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleEngines*
			    }

			    DATA
			    {
					maxThrust = #$../../../../baselineHypergolicThrust_0$
					atmosphereCurve
					{
						key = #$../../../../../key0_B_0$
						key = #$../../../../../key1_B_0$
						key = #$../../../../../key2_B_0$
					}
					PROPELLANT
					{
						name = MonoPropellant
						ratio = 0.9
						DrawGauge = True
					}
				}			    
			}
	    }
		
		SUBTYPE
	    {
			name = upgradeHypergolic
			title = #LOC_KTT_B9TITLE_UPGRADE_HYPERGOLIC
			descriptionDetail = #<b>Thrust:</b> $../../thrustASL_U_0$ kN ASL / $../../thrustVac_U_0$ kN Vac.\n<b>Isp:</b> $../../ispASL_U_0$ s ASL / $../../ispVac_U_0$ s Vac.
			addedCost = #$../../addCost_U$
			addedMass = #$../../addMass_U$
			defaultSubtypePriority = 0
			primaryColor = #005528
			secondaryColor = ResourceColorMonoPropellant
			upgradeRequired = #$../../kiwiEngineUpgradeHypergolic1$
			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleEngines*
			    }

			    DATA
			    {
					maxThrust = #$../../../../upgradeHypergolicThrust_0$
					atmosphereCurve
					{
						key = #$../../../../../key0_U_0$
						key = #$../../../../../key1_U_0$
						key = #$../../../../../key2_U_0$
					}
					PROPELLANT
					{
						name = MonoPropellant
						ratio = 0.9
						DrawGauge = True
					}
				}			    
			}
	    }
	}	
}
