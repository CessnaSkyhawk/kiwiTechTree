// Kiwi's Tech Tree Overhaul - RCS Upgrade Settings Patch
// Version 2.0
// Created 16 January 2021 for KSP 1.11.1
// Last Updated: 16 January 2021 for KSP 1.11.1
// Borrows heavily from Rational Resources code from JadeOfMaar
// Primary Switch Thrust Multipliers and ISPs based off discussions with Clamp-O-Tron and Spaceman.Spiff.

//Delete any competing Fuel Switch for compatibility
@PART[*]:HAS[@MODULE[ModuleRCSFX]:HAS[#resourceName[MonoPropellant]],MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RCS]],~rcsUpgrade[off]]:NEEDS[B9PartSwitch]:LAST[zzKiwiTechTree]
{
	!MODULE[ModuleB9PartSwitch]:HAS[#moduleID[RCS]] {}
}

@PART[*]:HAS[@MODULE[ModuleRCSFX]:HAS[#resourceName[MonoPropellant]],~rcsUpgrade[off]]:NEEDS[B9PartSwitch]:FOR[zzKiwiTechTree]
{
	%vacThrust = #$MODULE[ModuleRCSFX]/thrusterPower$
	// Add these here without % or @ so they can be manually overriden by individual parts if required as MM should grab the first instance 
	hydrazineThrustMultiplierConfig = #$@KIWI_RCS_SETTINGS/HYDRAZINE/THRUST_MULTIPLIER$
	hydrazineASLISPConfig = #$@KIWI_RCS_SETTINGS/HYDRAZINE/ASL_ISP$
	hydrazineVacISPConfig = #$@KIWI_RCS_SETTINGS/HYDRAZINE/VAC_ISP$
	
	hydrazineThrustMult = #$hydrazineASLISPConfig$ // get ASL Isp number
	@hydrazineThrustMult /= #$hydrazineVacISPConfig$ // get vac Isp number
	
	hydrazineVacThrust = #$vacThrust$
	@hydrazineVacThrust *= #$hydrazineThrustMultiplierConfig$
	
	hydrazineVacThrustDisp = #$hydrazineVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@hydrazineVacThrustDisp *= 100
	@hydrazineVacThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@hydrazineVacThrustDisp /= 100
	
	hydrazineASLThrust = #$vacThrust$
	@hydrazineASLThrust *= #$hydrazineThrustMultiplierConfig$
	@hydrazineASLThrust *= #$hydrazineThrustMult$
	
	hydrazineASLThrustDisp = #$hydrazineVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@hydrazineASLThrustDisp *= 100
	@hydrazineASLThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@hydrazineASLThrustDisp /= 100
	
	hydrazineAddCost = 300 // Base Upgrade Cost will be fixed given that RCS Thrusters can come on multiple parts.
	@hydrazineAddCost *= #$vacThrust$
	@hydrazineAddCost *= #$hydrazineThrustMultiplierConfig$
	
	@MODULE[ModuleRCSFX] // Set this so it is consistent in the VAB
	{
		@thrusterPower = #$../hydrazineVacThrust$
		!atmosphereCurve {}
		atmosphereCurve
		{
			key = #0 $../../hydrazineVacISPConfig$
			key = #1 $../../hydrazineASLISPConfig$
			key = 4 0.001
		}
	}
	
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = kiwiRCSSwitch
		switcherDescriptionPlural = #LOC_KTT_B9DESCRIPTIONPLURALS_RCSSWITCH // RCS Modes
		switcherDescription = #LOC_KTT_B9DESCRIPTION_RCSSWITCH // RCS Switch

		affectDragCubes = False
		affectFARVoxels = False
		
		SUBTYPE
	    {
			name = HYDRAZINE
			title = #LOC_KTT_B9TITLE_RCS_HYDRAZINE // Hydrazine
			descriptionDetail = #<b>Thrust:</b> $../../hydrazineASLThrustDisp$ kN ASL / $../../hydrazineVacThrustDisp$ kN Vac.\n<b>Isp:</b> $../../hydrazineASLISPConfig$ s ASL / $../../hydrazineVacISPConfig$ s Vac.
			addedCost = #$../../hydrazineAddCost$
			addedMass = 0
			defaultSubtypePriority = 1
			primaryColor = ResourceColorMonoPropellant
			secondaryColor = ResourceColorMonoPropellant
			//upgradeRequired  // Only if the primary setting is turned on in order to ensure that some form of RCS works.

			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleRCSFX
			    }

			    DATA
			    {
					thrusterPower = #$../../../../hydrazineVacThrust$
					atmosphereCurve
					{
						key = #0 $../../../../../hydrazineVacISPConfig$
						key = #1 $../../../../../hydrazineASLISPConfig$
						key = 4 0.001
					}
					PROPELLANT
					{
						name = MonoPropellant
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
				}			    
			}
	    }
		
	}
}

@PART[*]:HAS[@MODULE[ModuleRCSFX]:HAS[#resourceName[MonoPropellant]],~rcsUpgrade[off],~rcsPrimaryUpgrade[off]]:NEEDS[B9PartSwitch]:FOR[zzKiwiTechTree]
{
	@description = #$description$ \n\n<color=#ff0000>This part has RCS upgrades in Specialized Control (Tier 6) and Exotic Control (Tier 8)!</color>
	// Add these here without % or @ so they can be manually overriden by individual parts if required as MM should grab the first instance 
	htpThrustMultiplierConfig = #$@KIWI_RCS_SETTINGS/HYDROGENPEROXIDE/THRUST_MULTIPLIER$
	htpASLISPConfig = #$@KIWI_RCS_SETTINGS/HYDROGENPEROXIDE/ASL_ISP$
	htpVacISPConfig = #$@KIWI_RCS_SETTINGS/HYDROGENPEROXIDE/VAC_ISP$
	
	htpThrustMult = #$htpASLISPConfig$ // get ASL Isp number
	@htpThrustMult /= #$htpVacISPConfig$ // get vac Isp number
	
	htpVacThrust = #$vacThrust$
	@htpVacThrust *= #$htpThrustMultiplierConfig$
	
	htpVacThrustDisp = #$htpVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@htpVacThrustDisp *= 100
	@htpVacThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@htpVacThrustDisp /= 100
	
	htpASLThrust = #$vacThrust$
	@htpASLThrust *= #$htpThrustMultiplierConfig$
	@htpASLThrust *= #$htpThrustMult$
	
	htpASLThrustDisp = #$htpVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@htpASLThrustDisp *= 100
	@htpASLThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@htpASLThrustDisp /= 100
	
	
	// Add these here without % or @ so they can be manually overriden by individual parts if required as MM should grab the first instance 
	hypergolicThrustMultiplierConfig = #$@KIWI_RCS_SETTINGS/HYPERGOLIC/THRUST_MULTIPLIER$
	hypergolicASLISPConfig = #$@KIWI_RCS_SETTINGS/HYPERGOLIC/ASL_ISP$
	hypergolicVacISPConfig = #$@KIWI_RCS_SETTINGS/HYPERGOLIC/VAC_ISP$
	
	hypergolicThrustMult = #$hypergolicASLISPConfig$ // get ASL Isp number
	@hypergolicThrustMult /= #$hypergolicVacISPConfig$ // get vac Isp number
	
	hypergolicVacThrust = #$vacThrust$
	@hypergolicVacThrust *= #$hypergolicThrustMultiplierConfig$
	
	hypergolicVacThrustDisp = #$hypergolicVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@hypergolicVacThrustDisp *= 100
	@hypergolicVacThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@hypergolicVacThrustDisp /= 100
	
	hypergolicASLThrust = #$vacThrust$
	@hypergolicASLThrust *= #$hypergolicThrustMultiplierConfig$
	@hypergolicASLThrust *= #$hypergolicThrustMult$
	
	hypergolicASLThrustDisp = #$hypergolicVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@hypergolicASLThrustDisp *= 100
	@hypergolicASLThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@hypergolicASLThrustDisp /= 100
	
	hypergolicAddCost = 800 // Base Upgrade Cost will be fixed given that RCS Thrusters can come on multiple parts.
	@hypergolicAddCost *= #$vacThrust$
	@hypergolicAddCost *= #$hypergolicThrustMultiplierConfig$
	
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[kiwiRCSSwitch]]
	{
		@SUBTYPE[HYDRAZINE]
	    {
			upgradeRequired = rcs1Upgrade
	    }
		
		SUBTYPE
	    {
			name = HYDROGENPEROXIDE
			title = #LOC_KTT_B9TITLE_RCS_HYDROGENPEROXIDE // Hydrogen Peroxide
			descriptionDetail = #<b>Thrust:</b> $../../htpASLThrustDisp$ kN ASL / $../../htpVacThrustDisp$ kN Vac.\n<b>Isp:</b> $../../htpASLISPConfig$ s ASL / $../../htpVacISPConfig$ s Vac.
			addedCost = 0
			addedMass = 0
			defaultSubtypePriority = 0
			primaryColor = LightLightBlue
			secondaryColor = LightLightBlue

			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleRCSFX
			    }

			    DATA
			    {
					thrusterPower = #$../../../../htpVacThrust$
					atmosphereCurve
					{
						key = #0 $../../../../../htpVacISPConfig$
						key = #1 $../../../../../htpASLISPConfig$
						key = 4 0.001
					}
					PROPELLANT
					{
						name = HTP
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
				}			    
			}
	    }
		
		SUBTYPE
	    {
			name = HYPERGOLIC
			title = #LOC_KTT_B9TITLE_RCS_HYPERGOLIC // Aerozine/Nitroxide
			descriptionDetail = #<b>Thrust:</b> $../../hypergolicASLThrustDisp$ kN ASL / $../../hypergolicVacThrustDisp$ kN Vac.\n<b>Isp:</b> $../../hypergolicASLISPConfig$ s ASL / $../../hypergolicVacISPConfig$ s Vac.
			addedCost = #$../../hypergolicAddCost$
			addedMass = 0
			defaultSubtypePriority = 0
			primaryColor = PurpleBrown
			secondaryColor = SalmonPink
			upgradeRequired = rcs2Upgrade

			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleRCSFX
			    }

			    DATA
			    {
					thrusterPower = #$../../../../hypergolicVacThrust$
					atmosphereCurve
					{
						key = #0 $../../../../../hypergolicVacISPConfig$
						key = #1 $../../../../../hypergolicASLISPConfig$
						key = 4 0.001
					}
					PROPELLANT
					{
						name = Aerozine50
						ratio = 0.9
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
         				PROPELLANT
					{
						name = NTO
						ratio = 1.1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
				}			    
			}
	    }
	}
}

@PART[*]:HAS[@MODULE[ModuleRCSFX]:HAS[#resourceName[MonoPropellant]],~rcsUpgrade[off],~rcsColdGasUpgrade[off]]:NEEDS[B9PartSwitch]:FOR[zzKiwiTechTree]
{
	// Add these here without % or @ so they can be manually overriden by individual parts if required as MM should grab the first instance 
	atmThrustMultiplierConfig = #$@KIWI_RCS_SETTINGS/ATMOSPHERE/THRUST_MULTIPLIER$
	atmASLISPConfig = #$@KIWI_RCS_SETTINGS/ATMOSPHERE/ASL_ISP$
	atmVacISPConfig = #$@KIWI_RCS_SETTINGS/ATMOSPHERE/VAC_ISP$
	
	atmThrustMult = #$atmASLISPConfig$ // get ASL Isp number
	@atmThrustMult /= #$atmVacISPConfig$ // get vac Isp number
	
	atmVacThrust = #$vacThrust$
	@atmVacThrust *= #$atmThrustMultiplierConfig$
	
	atmVacThrustDisp = #$atmVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@atmVacThrustDisp *= 100
	@atmVacThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@atmVacThrustDisp /= 100
	
	atmASLThrust = #$vacThrust$
	@atmASLThrust *= #$atmThrustMultiplierConfig$
	@atmASLThrust *= #$atmThrustMult$
	
	atmASLThrustDisp = #$atmVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@atmASLThrustDisp *= 100
	@atmASLThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@atmASLThrustDisp /= 100
	
	
	
	hydrogenThrustMultiplierConfig = #$@KIWI_RCS_SETTINGS/HYDROGEN/THRUST_MULTIPLIER$
	hydrogenASLISPConfig = #$@KIWI_RCS_SETTINGS/HYDROGEN/ASL_ISP$
	hydrogenVacISPConfig = #$@KIWI_RCS_SETTINGS/HYDROGEN/VAC_ISP$
	
	hydrogenThrustMult = #$hydrogenASLISPConfig$ // get ASL Isp number
	@hydrogenThrustMult /= #$hydrogenVacISPConfig$ // get vac Isp number
	
	hydrogenVacThrust = #$vacThrust$
	@hydrogenVacThrust *= #$hydrogenThrustMultiplierConfig$
	
	hydrogenVacThrustDisp = #$hydrogenVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@hydrogenVacThrustDisp *= 100
	@hydrogenVacThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@hydrogenVacThrustDisp /= 100
	
	hydrogenASLThrust = #$vacThrust$
	@hydrogenASLThrust *= #$hydrogenThrustMultiplierConfig$
	@hydrogenASLThrust *= #$hydrogenThrustMult$
	
	hydrogenASLThrustDisp = #$hydrogenVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@hydrogenASLThrustDisp *= 100
	@hydrogenASLThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@hydrogenASLThrustDisp /= 100
	
	nitrogenThrustMultiplierConfig = #$@KIWI_RCS_SETTINGS/NITROGEN/THRUST_MULTIPLIER$
	nitrogenASLISPConfig = #$@KIWI_RCS_SETTINGS/NITROGEN/ASL_ISP$
	nitrogenVacISPConfig = #$@KIWI_RCS_SETTINGS/NITROGEN/VAC_ISP$
	
	nitrogenThrustMult = #$nitrogenASLISPConfig$ // get ASL Isp number
	@nitrogenThrustMult /= #$nitrogenVacISPConfig$ // get vac Isp number
	
	nitrogenVacThrust = #$vacThrust$
	@nitrogenVacThrust *= #$nitrogenThrustMultiplierConfig$
	
	nitrogenVacThrustDisp = #$nitrogenVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@nitrogenVacThrustDisp *= 100
	@nitrogenVacThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@nitrogenVacThrustDisp /= 100
	
	nitrogenASLThrust = #$vacThrust$
	@nitrogenASLThrust *= #$nitrogenThrustMultiplierConfig$
	@nitrogenASLThrust *= #$nitrogenThrustMult$
	
	nitrogenASLThrustDisp = #$nitrogenVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@nitrogenASLThrustDisp *= 100
	@nitrogenASLThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@nitrogenASLThrustDisp /= 100
	
	
	// Add these here without % or @ so they can be manually overriden by individual parts if required as MM should grab the first instance 
	argonThrustMultiplierConfig = #$@KIWI_RCS_SETTINGS/ARGON/THRUST_MULTIPLIER$
	argonASLISPConfig = #$@KIWI_RCS_SETTINGS/ARGON/ASL_ISP$
	argonVacISPConfig = #$@KIWI_RCS_SETTINGS/ARGON/VAC_ISP$
	
	argonThrustMult = #$argonASLISPConfig$ // get ASL Isp number
	@argonThrustMult /= #$argonVacISPConfig$ // get vac Isp number
	
	argonVacThrust = #$vacThrust$
	@argonVacThrust *= #$argonThrustMultiplierConfig$
	
	argonVacThrustDisp = #$argonVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@argonVacThrustDisp *= 100
	@argonVacThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@argonVacThrustDisp /= 100
	
	argonASLThrust = #$vacThrust$
	@argonASLThrust *= #$argonThrustMultiplierConfig$
	@argonASLThrust *= #$argonThrustMult$
	
	argonASLThrustDisp = #$argonVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@argonASLThrustDisp *= 100
	@argonASLThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@argonASLThrustDisp /= 100
	
	
	// Add these here without % or @ so they can be manually overriden by individual parts if required as MM should grab the first instance 
	xenonThrustMultiplierConfig = #$@KIWI_RCS_SETTINGS/XENON/THRUST_MULTIPLIER$
	xenonASLISPConfig = #$@KIWI_RCS_SETTINGS/XENON/ASL_ISP$
	xenonVacISPConfig = #$@KIWI_RCS_SETTINGS/XENON/VAC_ISP$
	
	xenonThrustMult = #$xenonASLISPConfig$ // get ASL Isp number
	@xenonThrustMult /= #$xenonVacISPConfig$ // get vac Isp number
	
	xenonVacThrust = #$vacThrust$
	@xenonVacThrust *= #$xenonThrustMultiplierConfig$
	
	xenonVacThrustDisp = #$xenonVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@xenonVacThrustDisp *= 100
	@xenonVacThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@xenonVacThrustDisp /= 100
	
	xenonASLThrust = #$vacThrust$
	@xenonASLThrust *= #$xenonThrustMultiplierConfig$
	@xenonASLThrust *= #$xenonThrustMult$
	
	xenonASLThrustDisp = #$xenonVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@xenonASLThrustDisp *= 100
	@xenonASLThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@xenonASLThrustDisp /= 100
	
	
	
	// Add these here without % or @ so they can be manually overriden by individual parts if required as MM should grab the first instance 
	methaneThrustMultiplierConfig = #$@KIWI_RCS_SETTINGS/METHANE/THRUST_MULTIPLIER$
	methaneASLISPConfig = #$@KIWI_RCS_SETTINGS/METHANE/ASL_ISP$
	methaneVacISPConfig = #$@KIWI_RCS_SETTINGS/METHANE/VAC_ISP$
	
	methaneThrustMult = #$methaneASLISPConfig$ // get ASL Isp number
	@methaneThrustMult /= #$methaneVacISPConfig$ // get vac Isp number
	
	methaneVacThrust = #$vacThrust$
	@methaneVacThrust *= #$methaneThrustMultiplierConfig$
	
	methaneVacThrustDisp = #$methaneVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@methaneVacThrustDisp *= 100
	@methaneVacThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@methaneVacThrustDisp /= 100
	
	methaneASLThrust = #$vacThrust$
	@methaneASLThrust *= #$methaneThrustMultiplierConfig$
	@methaneASLThrust *= #$methaneThrustMult$
	
	methaneASLThrustDisp = #$methaneVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@methaneASLThrustDisp *= 100
	@methaneASLThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@methaneASLThrustDisp /= 100
	
	
	// Add these here without % or @ so they can be manually overriden by individual parts if required as MM should grab the first instance 
	ammoniaThrustMultiplierConfig = #$@KIWI_RCS_SETTINGS/AMMONIA/THRUST_MULTIPLIER$
	ammoniaASLISPConfig = #$@KIWI_RCS_SETTINGS/AMMONIA/ASL_ISP$
	ammoniaVacISPConfig = #$@KIWI_RCS_SETTINGS/AMMONIA/VAC_ISP$
	
	ammoniaThrustMult = #$ammoniaASLISPConfig$ // get ASL Isp number
	@ammoniaThrustMult /= #$ammoniaVacISPConfig$ // get vac Isp number
	
	ammoniaVacThrust = #$vacThrust$
	@ammoniaVacThrust *= #$ammoniaThrustMultiplierConfig$
	
	ammoniaVacThrustDisp = #$ammoniaVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@ammoniaVacThrustDisp *= 100
	@ammoniaVacThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@ammoniaVacThrustDisp /= 100
	
	ammoniaASLThrust = #$vacThrust$
	@ammoniaASLThrust *= #$ammoniaThrustMultiplierConfig$
	@ammoniaASLThrust *= #$ammoniaThrustMult$
	
	ammoniaASLThrustDisp = #$ammoniaVacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@ammoniaASLThrustDisp *= 100
	@ammoniaASLThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@ammoniaASLThrustDisp /= 100
	
	
	co2ThrustMultiplierConfig = #$@KIWI_RCS_SETTINGS/CO2/THRUST_MULTIPLIER$
	co2ASLISPConfig = #$@KIWI_RCS_SETTINGS/CO2/ASL_ISP$
	co2VacISPConfig = #$@KIWI_RCS_SETTINGS/CO2/VAC_ISP$
	
	co2ThrustMult = #$co2ASLISPConfig$ // get ASL Isp number
	@co2ThrustMult /= #$co2VacISPConfig$ // get vac Isp number
	
	co2VacThrust = #$vacThrust$
	@co2VacThrust *= #$co2ThrustMultiplierConfig$
	
	co2VacThrustDisp = #$co2VacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@co2VacThrustDisp *= 100
	@co2VacThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@co2VacThrustDisp /= 100
	
	co2ASLThrust = #$vacThrust$
	@co2ASLThrust *= #$co2ThrustMultiplierConfig$
	@co2ASLThrust *= #$co2ThrustMult$
	
	co2ASLThrustDisp = #$co2VacThrust$ // Will do 2 decimals as this could truncate to 0 otherwise in some cases.
	@co2ASLThrustDisp *= 100
	@co2ASLThrustDisp ^= :\.\d+:: // Floor value to get an integer
	@co2ASLThrustDisp /= 100
	
	
	@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[kiwiRCSSwitch]]
	{
		SUBTYPE
	    {
			name = ATMOSPHERE
			title = #LOC_KTT_B9TITLE_RCS_ATMOSPHERE // IntakeAtm
			descriptionDetail = #<b>Thrust:</b> $../../atmASLThrustDisp$ kN ASL / $../../atmVacThrustDisp$ kN Vac.\n<b>Isp:</b> $../../atmASLISPConfig$ s ASL / $../../atmVacISPConfig$ s Vac.
			addedCost = 0
			addedMass = 0
			defaultSubtypePriority = 0
			primaryColor = LightGrey
			secondaryColor = LightGrey
			upgradeRequired = rcs1Upgrade

			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleRCSFX
			    }

			    DATA
			    {
					thrusterPower = #$../../../../atmVacThrust$
					atmosphereCurve
					{
						key = #0 $../../../../../atmVacISPConfig$
						key = #1 $../../../../../atmASLISPConfig$
						key = 4 0.001
					}
					PROPELLANT
					{
						name = IntakeAtm
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
				}			    
			}
	    }
		
		SUBTYPE
	    {
			name = HYDROGEN
			title = #LOC_KTT_B9TITLE_RCS_HYDROGEN // LqdHydrogen
			descriptionDetail = #<b>Thrust:</b> $../../hydrogenASLThrustDisp$ kN ASL / $../../hydrogenVacThrustDisp$ kN Vac.\n<b>Isp:</b> $../../hydrogenASLISPConfig$ s ASL / $../../hydrogenVacISPConfig$ s Vac.
			addedCost = 0
			addedMass = 0
			defaultSubtypePriority = 0
			primaryColor = ResourceColorLqdHydrogen
			secondaryColor = ResourceColorLqdHydrogen
			upgradeRequired = rcs2Upgrade

			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleRCSFX
			    }

			    DATA
			    {
					thrusterPower = #$../../../../hydrogenVacThrust$
					atmosphereCurve
					{
						key = #0 $../../../../../hydrogenVacISPConfig$
						key = #1 $../../../../../hydrogenASLISPConfig$
						key = 4 0.001
					}
					PROPELLANT
					{
						name = LqdHydrogen
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
				}			    
			}
	    }
		
		SUBTYPE
	    {
			name = NITROGEN
			title = #LOC_KTT_B9TITLE_RCS_NITROGEN // LqdNitrogen
			descriptionDetail = #<b>Thrust:</b> $../../nitrogenASLThrustDisp$ kN ASL / $../../nitrogenVacThrustDisp$ kN Vac.\n<b>Isp:</b> $../../nitrogenASLISPConfig$ s ASL / $../../nitrogenVacISPConfig$ s Vac.
			addedCost = 0
			addedMass = 0
			defaultSubtypePriority = 0
			primaryColor = PeacockBlue
			secondaryColor = PeacockBlue
			upgradeRequired = rcs1Upgrade

			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleRCSFX
			    }

			    DATA
			    {
					thrusterPower = #$../../../../nitrogenVacThrust$
					atmosphereCurve
					{
						key = #0 $../../../../../nitrogenVacISPConfig$
						key = #1 $../../../../../nitrogenASLISPConfig$
						key = 4 0.001
					}
					PROPELLANT
					{
						name = LqdNitrogen
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
				}			    
			}
	    }
		
		SUBTYPE
	    {
			name = ARGON
			title = #LOC_KTT_B9TITLE_RCS_ARGON // ArgonGas
			descriptionDetail = #<b>Thrust:</b> $../../argonASLThrustDisp$ kN ASL / $../../argonVacThrustDisp$ kN Vac.\n<b>Isp:</b> $../../argonASLISPConfig$ s ASL / $../../argonVacISPConfig$ s Vac.
			addedCost = 0
			addedMass = 0
			defaultSubtypePriority = 0
			primaryColor = Blush
			secondaryColor = Blush
			upgradeRequired = rcs1Upgrade

			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleRCSFX
			    }

			    DATA
			    {
					thrusterPower = #$../../../../argonVacThrust$
					atmosphereCurve
					{
						key = #0 $../../../../../argonVacISPConfig$
						key = #1 $../../../../../argonASLISPConfig$
						key = 4 0.001
					}
					PROPELLANT
					{
						name = ArgonGas
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
				}			    
			}
	    }
		
		SUBTYPE
	    {
			name = XENON
			title = #LOC_KTT_B9TITLE_RCS_XENON // XenonGas
			descriptionDetail = #<b>Thrust:</b> $../../xenonASLThrustDisp$ kN ASL / $../../xenonVacThrustDisp$ kN Vac.\n<b>Isp:</b> $../../xenonASLISPConfig$ s ASL / $../../xenonVacISPConfig$ s Vac.
			addedCost = 0
			addedMass = 0
			defaultSubtypePriority = 0
			primaryColor = ResourceColorXenonGas
			secondaryColor = ResourceColorXenonGas
			upgradeRequired = rcs1Upgrade

			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleRCSFX
			    }

			    DATA
			    {
					thrusterPower = #$../../../../xenonVacThrust$
					atmosphereCurve
					{
						key = #0 $../../../../../xenonVacISPConfig$
						key = #1 $../../../../../xenonASLISPConfig$
						key = 4 0.001
					}
					PROPELLANT
					{
						name = XenonGas
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
				}			    
			}
	    }
		
		SUBTYPE
	    {
			name = METHANE
			title = #LOC_KTT_B9TITLE_RCS_METHANE // LqdMethane
			descriptionDetail = #<b>Thrust:</b> $../../methaneASLThrustDisp$ kN ASL / $../../methaneVacThrustDisp$ kN Vac.\n<b>Isp:</b> $../../methaneASLISPConfig$ s ASL / $../../methaneVacISPConfig$ s Vac.
			addedCost = 0
			addedMass = 0
			defaultSubtypePriority = 0
			primaryColor = ResourceColorLqdMethane
			secondaryColor = ResourceColorLqdMethane
			upgradeRequired = rcs2Upgrade

			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleRCSFX
			    }

			    DATA
			    {
					thrusterPower = #$../../../../methaneVacThrust$
					atmosphereCurve
					{
						key = #0 $../../../../../methaneVacISPConfig$
						key = #1 $../../../../../methaneASLISPConfig$
						key = 4 0.001
					}
					PROPELLANT
					{
						name = LqdMethane
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
				}			    
			}
	    }
		
		SUBTYPE
	    {
			name = AMMONIA
			title = #LOC_KTT_B9TITLE_RCS_AMMONIA // LqdAmmonia
			descriptionDetail = #<b>Thrust:</b> $../../ammoniaASLThrustDisp$ kN ASL / $../../ammoniaVacThrustDisp$ kN Vac.\n<b>Isp:</b> $../../ammoniaASLISPConfig$ s ASL / $../../ammoniaVacISPConfig$ s Vac.
			addedCost = 0
			addedMass = 0
			defaultSubtypePriority = 0
			primaryColor = BurntRed
			secondaryColor = BurntRed
			upgradeRequired = rcs1Upgrade

			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleRCSFX
			    }

			    DATA
			    {
					thrusterPower = #$../../../../ammoniaVacThrust$
					atmosphereCurve
					{
						key = #0 $../../../../../ammoniaVacISPConfig$
						key = #1 $../../../../../ammoniaASLISPConfig$
						key = 4 0.001
					}
					PROPELLANT
					{
						name = LqdAmmonia
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
				}			    
			}
	    }
		
		SUBTYPE
	    {
			name = CO2
			title = #LOC_KTT_B9TITLE_RCS_CO2 // LqdCO2
			descriptionDetail = #<b>Thrust:</b> $../../co2ASLThrustDisp$ kN ASL / $../../co2VacThrustDisp$ kN Vac.\n<b>Isp:</b> $../../co2ASLISPConfig$ s ASL / $../../co2VacISPConfig$ s Vac.
			addedCost = 0
			addedMass = 0
			defaultSubtypePriority = 0
			primaryColor = WarmGrey
			secondaryColor = WarmGrey
			upgradeRequired = rcs1Upgrade

			MODULE
			{
			    IDENTIFIER
			    {
					name = ModuleRCSFX
			    }

			    DATA
			    {
					thrusterPower = #$../../../../co2VacThrust$
					atmosphereCurve
					{
						key = #0 $../../../../../co2VacISPConfig$
						key = #1 $../../../../../co2ASLISPConfig$
						key = 4 0.001
					}
					PROPELLANT
					{
						name = LqdCO2
						ratio = 1
						resourceFlowMode = STAGE_PRIORITY_FLOW
					}
				}			    
			}
	    }
	}
}
	
	